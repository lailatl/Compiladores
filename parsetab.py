
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightASSIGNASSIGN BOOLEAN DIVIDE EQ GE GT ID IMPRIME INT LE LOGIC LOGIC LPAREN LT MINUS NEQ NEWLINE NUMBER PLUS RPAREN TIMESprograma : declaracao_list statement_list\n                | emptydeclaracao_list : declaracao NEWLINE declaracao_list\n                       | emptydeclaracao : INT ID declaracao_prime\n                  | BOOLEAN ID declaracao_primedeclaracao_prime : ASSIGN expr\n                        | emptystatement_list : statement NEWLINE statement_list\n                      | emptystatement : ID ASSIGN expr\n                 | IMPRIME LPAREN expr RPARENexpr : operator comparisonoperator : term expr_primeexpr_prime : PLUS term expr_prime\n                  | MINUS term expr_prime\n                  | emptyterm : factor term_primeterm_prime : TIMES factor term_prime\n                  | DIVIDE factor term_prime\n                  | emptyfactor : NUMBER\n              | ID\n              | LPAREN expr RPAREN\n              | LOGICcomparison : comparison_op operator comparison\n                  | emptycomparison_op : EQ\n                     | NEQ\n                     | LT\n                     | GT\n                     | LE\n                     | GEempty :'
    
_lr_action_items = {'$end':([0,1,2,3,7,9,12,15,18,19,24,],[-34,0,-34,-2,-1,-10,-34,-34,-3,-4,-9,]),'ID':([0,2,3,5,6,12,15,16,17,18,19,21,31,36,38,39,40,41,42,43,45,46,49,50,],[-34,10,-4,13,14,-34,10,25,25,-3,-4,25,25,25,-28,-29,-30,-31,-32,-33,25,25,25,25,]),'IMPRIME':([0,2,3,12,15,18,19,],[-34,11,-4,-34,11,-3,-4,]),'INT':([0,12,],[5,5,]),'BOOLEAN':([0,12,],[6,6,]),'NEWLINE':([4,8,13,14,20,22,23,25,26,27,28,29,30,32,34,35,37,44,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,],[12,15,-34,-34,-5,-8,-6,-23,-11,-34,-34,-34,-22,-25,-7,-13,-27,-14,-17,-18,-21,-12,-34,-34,-34,-34,-34,-24,-26,-15,-16,-19,-20,]),'ASSIGN':([10,13,14,],[16,21,21,]),'LPAREN':([11,16,17,21,31,36,38,39,40,41,42,43,45,46,49,50,],[17,31,31,31,31,31,-28,-29,-30,-31,-32,-33,31,31,31,31,]),'NUMBER':([16,17,21,31,36,38,39,40,41,42,43,45,46,49,50,],[30,30,30,30,30,-28,-29,-30,-31,-32,-33,30,30,30,30,]),'LOGIC':([16,17,21,31,36,38,39,40,41,42,43,45,46,49,50,],[32,32,32,32,32,-28,-29,-30,-31,-32,-33,32,32,32,32,]),'TIMES':([25,29,30,32,57,58,59,],[-23,49,-22,-25,49,49,-24,]),'DIVIDE':([25,29,30,32,57,58,59,],[-23,50,-22,-25,50,50,-24,]),'PLUS':([25,28,29,30,32,48,51,55,56,57,58,59,63,64,],[-23,45,-34,-22,-25,-18,-21,45,45,-34,-34,-24,-19,-20,]),'MINUS':([25,28,29,30,32,48,51,55,56,57,58,59,63,64,],[-23,46,-34,-22,-25,-18,-21,46,46,-34,-34,-24,-19,-20,]),'EQ':([25,27,28,29,30,32,44,47,48,51,54,55,56,57,58,59,61,62,63,64,],[-23,38,-34,-34,-22,-25,-14,-17,-18,-21,38,-34,-34,-34,-34,-24,-15,-16,-19,-20,]),'NEQ':([25,27,28,29,30,32,44,47,48,51,54,55,56,57,58,59,61,62,63,64,],[-23,39,-34,-34,-22,-25,-14,-17,-18,-21,39,-34,-34,-34,-34,-24,-15,-16,-19,-20,]),'LT':([25,27,28,29,30,32,44,47,48,51,54,55,56,57,58,59,61,62,63,64,],[-23,40,-34,-34,-22,-25,-14,-17,-18,-21,40,-34,-34,-34,-34,-24,-15,-16,-19,-20,]),'GT':([25,27,28,29,30,32,44,47,48,51,54,55,56,57,58,59,61,62,63,64,],[-23,41,-34,-34,-22,-25,-14,-17,-18,-21,41,-34,-34,-34,-34,-24,-15,-16,-19,-20,]),'LE':([25,27,28,29,30,32,44,47,48,51,54,55,56,57,58,59,61,62,63,64,],[-23,42,-34,-34,-22,-25,-14,-17,-18,-21,42,-34,-34,-34,-34,-24,-15,-16,-19,-20,]),'GE':([25,27,28,29,30,32,44,47,48,51,54,55,56,57,58,59,61,62,63,64,],[-23,43,-34,-34,-22,-25,-14,-17,-18,-21,43,-34,-34,-34,-34,-24,-15,-16,-19,-20,]),'RPAREN':([25,27,28,29,30,32,33,35,37,44,47,48,51,52,54,55,56,57,58,59,60,61,62,63,64,],[-23,-34,-34,-34,-22,-25,53,-13,-27,-14,-17,-18,-21,59,-34,-34,-34,-34,-34,-24,-26,-15,-16,-19,-20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'declaracao_list':([0,12,],[2,18,]),'empty':([0,2,12,13,14,15,27,28,29,54,55,56,57,58,],[3,9,19,22,22,9,37,47,51,37,47,47,51,51,]),'declaracao':([0,12,],[4,4,]),'statement_list':([2,15,],[7,24,]),'statement':([2,15,],[8,8,]),'declaracao_prime':([13,14,],[20,23,]),'expr':([16,17,21,31,],[26,33,34,52,]),'operator':([16,17,21,31,36,],[27,27,27,27,54,]),'term':([16,17,21,31,36,45,46,],[28,28,28,28,28,55,56,]),'factor':([16,17,21,31,36,45,46,49,50,],[29,29,29,29,29,29,29,57,58,]),'comparison':([27,54,],[35,60,]),'comparison_op':([27,54,],[36,36,]),'expr_prime':([28,55,56,],[44,61,62,]),'term_prime':([29,57,58,],[48,63,64,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> declaracao_list statement_list','programa',2,'p_programa','parser.py',82),
  ('programa -> empty','programa',1,'p_programa','parser.py',83),
  ('declaracao_list -> declaracao NEWLINE declaracao_list','declaracao_list',3,'p_declaracao_list','parser.py',87),
  ('declaracao_list -> empty','declaracao_list',1,'p_declaracao_list','parser.py',88),
  ('declaracao -> INT ID declaracao_prime','declaracao',3,'p_declaracao','parser.py',92),
  ('declaracao -> BOOLEAN ID declaracao_prime','declaracao',3,'p_declaracao','parser.py',93),
  ('declaracao_prime -> ASSIGN expr','declaracao_prime',2,'p_declaracao_prime','parser.py',97),
  ('declaracao_prime -> empty','declaracao_prime',1,'p_declaracao_prime','parser.py',98),
  ('statement_list -> statement NEWLINE statement_list','statement_list',3,'p_statement_list','parser.py',102),
  ('statement_list -> empty','statement_list',1,'p_statement_list','parser.py',103),
  ('statement -> ID ASSIGN expr','statement',3,'p_statement','parser.py',107),
  ('statement -> IMPRIME LPAREN expr RPAREN','statement',4,'p_statement','parser.py',108),
  ('expr -> operator comparison','expr',2,'p_expr','parser.py',112),
  ('operator -> term expr_prime','operator',2,'p_operator','parser.py',116),
  ('expr_prime -> PLUS term expr_prime','expr_prime',3,'p_expr_prime','parser.py',120),
  ('expr_prime -> MINUS term expr_prime','expr_prime',3,'p_expr_prime','parser.py',121),
  ('expr_prime -> empty','expr_prime',1,'p_expr_prime','parser.py',122),
  ('term -> factor term_prime','term',2,'p_term','parser.py',126),
  ('term_prime -> TIMES factor term_prime','term_prime',3,'p_term_prime','parser.py',130),
  ('term_prime -> DIVIDE factor term_prime','term_prime',3,'p_term_prime','parser.py',131),
  ('term_prime -> empty','term_prime',1,'p_term_prime','parser.py',132),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',136),
  ('factor -> ID','factor',1,'p_factor','parser.py',137),
  ('factor -> LPAREN expr RPAREN','factor',3,'p_factor','parser.py',138),
  ('factor -> LOGIC','factor',1,'p_factor','parser.py',139),
  ('comparison -> comparison_op operator comparison','comparison',3,'p_comparison','parser.py',143),
  ('comparison -> empty','comparison',1,'p_comparison','parser.py',144),
  ('comparison_op -> EQ','comparison_op',1,'p_comparison_op','parser.py',148),
  ('comparison_op -> NEQ','comparison_op',1,'p_comparison_op','parser.py',149),
  ('comparison_op -> LT','comparison_op',1,'p_comparison_op','parser.py',150),
  ('comparison_op -> GT','comparison_op',1,'p_comparison_op','parser.py',151),
  ('comparison_op -> LE','comparison_op',1,'p_comparison_op','parser.py',152),
  ('comparison_op -> GE','comparison_op',1,'p_comparison_op','parser.py',153),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',157),
]
